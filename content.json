{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/02/09/hello-world/"},{"title":"1. 디자인 패턴에 앞서","text":"디자인 패턴은 객체지향 패러다임에서 더 좋은 코드란 무엇인가에 대한 답으로써 핵심은 다음과 같다. 중복의 최소화: 잦은 수정 - 중복 코드 중 한곳을 고치려면 중복된 모든 코드에서도 같은 작업이 필요하다 코드 변경의 용이성: 잦은 수정 - 코드는 항상 완벽하지 않고, 요구사항은 상시 바뀔 수 있다. 재사용성: 정돈된 코드는 마치 프레임워크처럼 전혀 다른 요구사항 및 경우에도 그대로 쓸 수 있다. 설명은 글로도 충분히 할 수 있지만 학습에는 그림만한것이 없다. 그림 설명을 위해 몇가지 숙지해야할 클래스 다이어그램 요소들이 있는데 다음과 같다.– 실선 빈 화살표 = implements (구현) : 코드는 인터페이스를 단위로 구성된다. 해당 인터페이스의 구현 클래스가 실제 작업 클래스로 주입된다. 사용하려는 구현 클래스를 코드 내에 지정하지 않고, 외부에서 타의에 의해 결정된다. 타의에 의해 주입되는것을 Dependency Injection, 내지는 Inversion of Control 이라 부른다. 정확히 IoC/DI 개념은 Spring 프레임워크에서 배웠지만 그 이전에 하나의 디자인 패턴으로 강구된것이었으며, 1) 생성자, 2) Setter, 3) 초기화 인터페이스 세 방법을 이용한 구현 클래스 주입 방법이 있다. 주입은 구현 클래스 결정권자인 ‘타인’인 Container 를 통해 이뤄진다. 따로 프레임워크 도움없이 하려면 Container 없이 직접 코드의 가장 외부에서 주입하기도 한다.– 점선 빈 화살표 = extends (상속)– 실선 찬 화살표 = composite (구성) : A 클래스가 B 클래스를 갖고있을때, 거의 인터페이스 형태로 갖고있다. 사실상 이 세 개의 화살표가 디자인 패턴의 모든것을 말해준다해도 과언이 아니다. 디자인 패턴은 객체지향 패러다임을 어떻게 사용하는것이 올바르게 사용하는것인가란 고찰이므로, 앞으로의 글은 객체지향 패러다임에 등장한 세 요소, 구현, 상속, 구성을 어떻게 사용해야하는지에 대한 이야기가 될 것이다 출처 1: https://martinfowler.com/articles/injection.html출처 2: http://www.nextree.co.kr/p11247/ Quick StartCreate a new post1$ hexo new \"My New Post\"","link":"/2018/12/30/new-post-using-hexo-markdown/"}],"tags":[],"categories":[{"name":"Test","slug":"Test","link":"/categories/Test/"},{"name":"Nested","slug":"Test/Nested","link":"/categories/Test/Nested/"},{"name":"NN","slug":"Test/Nested/NN","link":"/categories/Test/Nested/NN/"},{"name":"haha","slug":"Test/Nested/haha","link":"/categories/Test/Nested/haha/"},{"name":"hehe","slug":"Test/Nested/haha/hehe","link":"/categories/Test/Nested/haha/hehe/"},{"name":"kiki","slug":"Test/Nested/haha/kiki","link":"/categories/Test/Nested/haha/kiki/"},{"name":"si","slug":"Test/Nested/haha/hehe/si","link":"/categories/Test/Nested/haha/hehe/si/"},{"name":"val","slug":"Test/Nested/haha/hehe/si/val","link":"/categories/Test/Nested/haha/hehe/si/val/"},{"name":"asde","slug":"Test/Nested/asde","link":"/categories/Test/Nested/asde/"},{"name":"hehe","slug":"Test/Nested/asde/hehe","link":"/categories/Test/Nested/asde/hehe/"},{"name":"Design Pattern","slug":"Design-Pattern","link":"/categories/Design-Pattern/"},{"name":"Nested","slug":"Design-Pattern/Nested","link":"/categories/Design-Pattern/Nested/"},{"name":"asde","slug":"Design-Pattern/Nested/asde","link":"/categories/Design-Pattern/Nested/asde/"}]}